{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Wiki Structure","text":""},{"location":"#1-home-introduction","title":"1. Home (Introduction)","text":"<p>This will serve as the landing page of the Wiki and outline:</p> <ul> <li>Purpose of OpenPM Foundry: Introduce the organization as a hub for crafting open-source project management tools and playbooks tailored for zero-to-one-stage organizations.</li> <li>About The OpenPM Playbook: Explain the playbook\u2019s goal to provide actionable guidance for managing tech projects efficiently in early-stage organizations.</li> <li>Key Objectives:<ul> <li>Establish best practices for project management and development processes.</li> <li>Promote and integrate open-source tools.</li> <li>Foster collaboration within the tech community.</li> </ul> </li> <li>How to Use This Wiki: Briefly describe how contributors and users can navigate the Wiki.</li> </ul>"},{"location":"#2-contributing-guidelines","title":"2. Contributing Guidelines","text":"<p>This section will guide contributors on how to contribute effectively:</p> <ul> <li>How to Contribute:<ul> <li>Forking the repository, making changes, and submitting pull requests.</li> <li>Standards for writing and formatting content (e.g., Markdown syntax).</li> </ul> </li> <li>Maintaining the Playbook:<ul> <li>Regular review cycles for content updates.</li> <li>Process for archiving outdated content.</li> </ul> </li> <li>Code of Conduct: Outline expected behaviour to maintain a collaborative environment.</li> <li>Acknowledgements: Recognize contributors who help improve the playbook.</li> </ul>"},{"location":"#3-development-roadmap","title":"3. Development Roadmap","text":"<p>This section will outline the planned evolution of the playbook. Include:</p> <ol> <li>Current Focus Areas (to be developed immediately):<ul> <li>Guideline for \"The Vibe Coders\"</li> <li>Source Code Management</li> <li>Sprint planning Guidelines</li> <li>Feasibility Analysis and Effort Estimation Guidelines</li> </ul> </li> <li>Next Phase (Planned Additions):<ul> <li>How to Use AI Tools (for development and project management).</li> <li>Suggestions for Open-Source Tools.</li> <li>Deployment</li> </ul> </li> <li>Future Enhancements:<ul> <li>Developer Hiring Guide</li> <li>Application Security Cheat Sheet</li> </ul> </li> </ol>"},{"location":"#4-playbook-sections-content-pages","title":"4. Playbook Sections (Content Pages)","text":"<p>Each section below will have its own dedicated page(s) in the Wiki:</p>"},{"location":"#41-guideline-for-the-vibe-coders","title":"4.1 Guideline for \"The Vibe Coders\"","text":"<ul> <li>Define what \"vibe coders\" means in your context.</li> <li>Practices to foster creativity, collaboration, and innovation within teams.</li> <li>Tips on building a positive team culture that encourages experimentation and open communication.</li> </ul>"},{"location":"#42-source-code-management","title":"4.2 Source Code Management","text":"<ul> <li>Best practices for version control (e.g., Git workflows like GitHub Flow).</li> <li>Guidance on branching strategies, commit messages and pull requests.</li> <li>Recommendations for code review processes and tools.</li> </ul>"},{"location":"#43-sprint-planning-guidelines","title":"4.3 Sprint Planning Guidelines","text":"<ul> <li>Overview of agile sprint planning concepts.</li> <li>Steps to effectively plan sprints, including defining goals and tasks.</li> <li>Techniques for prioritizing backlog items and estimating effort.</li> </ul>"},{"location":"#44-feasibility-analysis-and-effort-estimation-guidelines","title":"4.4 Feasibility Analysis and Effort Estimation Guidelines","text":"<ul> <li>Frameworks for conducting feasibility analyses on potential projects.</li> <li>Methods for estimating effort, including story points and time-based estimates.</li> <li>Tools and techniques to facilitate accurate estimation.</li> </ul>"},{"location":"#45-how-to-use-ai-tools","title":"4.5 How to Use AI Tools","text":"<ul> <li>Overview of AI tools applicable to software development (e.g., GitHub Copilot).</li> <li>Guidance on integrating AI tools into project management workflows.</li> <li>Ethical considerations when using AI in development processes.</li> </ul>"},{"location":"#46-suggestions-for-open-source-tools","title":"4.6 Suggestions for Open-Source Tools","text":"<ul> <li>Curated a list of recommended open-source tools for project management and development.</li> <li>Descriptions of each tool's features, benefits, and use cases.</li> <li>Guides on how to integrate these tools into existing workflows.</li> </ul>"},{"location":"#47-deployment","title":"4.7 Deployment","text":"<ul> <li>Steps for setting up Continuous Integration/Continuous Deployment (CI/CD) pipelines.</li> <li>Recommended tools (e.g., Jenkins, GitHub Actions) for deployment automation.</li> <li>Environment-specific deployment strategies and best practices.</li> </ul>"},{"location":"#48-developer-hiring-guide-future-enhancement","title":"4.8 Developer Hiring Guide (Future Enhancement)","text":"<ul> <li>Templates for job descriptions tailored for early-stage organizations.</li> <li>Interview processes are designed to assess technical skills and cultural fit.</li> <li>Tips on creating an inclusive hiring process.</li> </ul>"},{"location":"#49-application-security-cheat-sheet-future-enhancement","title":"4.9 Application Security Cheat Sheet (Future Enhancement)","text":"<ul> <li>Basic security practices (e.g., handling sensitive data, secure coding standards).</li> <li>Checklist for security reviews in development cycles.</li> <li>Resources for further learning about application security.</li> </ul>"},{"location":"#5-templates-examples","title":"5. Templates &amp; Examples","text":"<p>Provide downloadable or copyable templates:</p> <ul> <li>Job descriptions, security checklists, deployment scripts, etc.</li> </ul>"},{"location":"#6-faq","title":"6. FAQ","text":"<p>Address common questions about using or contributing to the playbook.</p>"},{"location":"#future-additions","title":"Future Additions","text":"<p>As the roadmap evolves, consider adding sections like:</p> <ol> <li>Case studies from organizations that have implemented the playbook successfully.</li> <li>A community forum or discussion page linked from the Wiki.</li> </ol>"},{"location":"vibe-coding-guidelines/","title":"Guidelines for the \"Vibe Coders\"","text":""},{"location":"vibe-coding-guidelines/#executive-summary","title":"Executive Summary","text":"<p>Vibe coding is a revolutionary approach that leverages artificial intelligence to accelerate software development for startups and innovation teams. By combining AI-powered code generation with strategic human oversight, vibe coding enables teams to build MVPs and prototypes in a fraction of the traditional development time. This methodology excels in scenarios where speed and iteration are prioritized over enterprise-grade robustness, allowing startups to validate ideas quickly and cost-effectively.</p> <p>Studies from McKinsey and Microsoft indicate that developers using AI tools can achieve 50-80% productivity gains, translating to significant cost savings and faster time-to-market. However, vibe coding requires clear boundaries, rigorous code reviews, and a thoughtful transition strategy as products mature. This guide provides a comprehensive framework for implementing vibe coding effectively while maintaining quality and security standards.</p>"},{"location":"vibe-coding-guidelines/#table-of-contents","title":"Table of Contents","text":"<ul> <li>1. Introduction to Vibe Coding</li> <li>2. Setting Up Your Project</li> <li>3. Planning and Task Management</li> <li>4. Development Workflow</li> <li>5. Best Practices</li> <li>6. Transitioning to Production</li> <li>7. Case Studies</li> <li>8. Troubleshooting Common Issues</li> <li>9. Measuring Success</li> <li>10. Community and Learning Resources</li> <li>11. Glossary of Terms</li> <li>12. Conclusion</li> </ul>"},{"location":"vibe-coding-guidelines/#1-introduction-to-vibe-coding","title":"1. Introduction to Vibe Coding","text":"<p>Vibe coding is an innovative approach that harnesses artificial intelligence (AI) to accelerate software development, particularly for creating Minimum Viable Products (MVPs) and prototypes. An MVP is a basic product version with just enough features to attract early users and gather feedback. For zero-to-one stage startups, vibe coding offers significant advantages: it reduces development time, lowers costs, and enables rapid idea validation. A McKinsey study found that developers using generative AI can complete tasks up to twice as fast, and a Microsoft study reported 50% productivity gains with tools like GitHub Copilot. These gains suggest potential cost reductions, though exact savings vary by project.</p>"},{"location":"vibe-coding-guidelines/#when-to-use-vibe-coding","title":"When to Use Vibe Coding","text":"<p>Vibe coding excels in scenarios prioritizing speed and iteration:</p> <ul> <li>MVPs and Prototypes: Quickly test product-market fit.</li> <li>Internal Tools: Build utilities for team efficiency.</li> <li>Feature Proofs of Concept: Experiment with new ideas.</li> <li>Non-Production Exploratory Work: Explore innovative solutions.</li> <li>Educational Demos: Create learning materials efficiently.</li> </ul>"},{"location":"vibe-coding-guidelines/#when-not-to-use-vibe-coding","title":"When Not to Use Vibe Coding","text":"<p>It\u2019s less suitable for:</p> <ul> <li>Mission-Critical Systems: Where failure is unacceptable.</li> <li>High-Security Applications: Requiring robust protection.</li> <li>High-Uptime Systems: Needing 99.9%+ availability.</li> <li>High-Throughput Transaction Systems: Handling large transaction volumes.</li> <li>Regulated Industry Applications: Subject to strict compliance.</li> </ul> <p>These boundaries, supported by TechTarget, highlight the need for caution due to potential AI-generated code vulnerabilities.</p>"},{"location":"vibe-coding-guidelines/#visual-guide-to-vibe-coding","title":"Visual Guide to Vibe Coding","text":""},{"location":"vibe-coding-guidelines/#traditional-vs-vibe-coding-comparison","title":"Traditional vs. Vibe Coding Comparison","text":"Development Aspect Traditional Approach Vibe Coding Approach Time to MVP 3-6 months 2-8 weeks Development Cost $$$$ $$ Team Size Required 3-5 developers 1-2 developers Code Quality Consistent, well-architected Varies, requires review Scalability Built-in from start May require refactoring Security Systematic approach Requires additional verification Maintenance Standard practices May need more documentation"},{"location":"vibe-coding-guidelines/#2-setting-up-your-project","title":"2. Setting Up Your Project","text":"<p>A well-defined setup is crucial for vibe coding success, involving clear project scoping, tool selection, and environment configuration.</p>"},{"location":"vibe-coding-guidelines/#step-1-define-project-boundaries","title":"Step 1: Define Project Boundaries","text":"<p>Create a Functional Requirements Document (FRD) to outline software features and functionalities. The FRD should:</p> <ul> <li>Specify Features: List features with clear numbering (e.g., Feature 1: User Authentication, Module 1.1: Login).</li> <li>Define Scope: Include in-scope and out-of-scope sections to prevent scope creep.</li> <li>Set Constraints: Detail limits like API rate limits (e.g., 100 requests/minute), file counts, or code line limits.</li> <li>Plan for Future: Note potential future enhancements (e.g., adding two-factor authentication).</li> </ul> <p>Example FRD Snippet:</p> Feature ID Description Constraints Future Enhancements F1/M1.1 User Login &lt;200ms response, 100 req/min Add OAuth support F1/M1.2 Password Reset Email rate limit: 5/hour Add SMS option"},{"location":"vibe-coding-guidelines/#step-2-leverage-ai-to-create-the-frd","title":"Step 2: Leverage AI to Create the FRD","text":"<p>Use advanced Large Language Models (LLMs) from providers like Anthropic or OpenAI to draft the FRD. Provide a detailed project idea, and the AI can structure requirements. For example:</p> <ul> <li>Prompt: \u201cCreate an FRD for a social media analytics tool with data aggregation and basic dashboards, using Next.js and FastAPI.\u201d</li> <li>Refine the AI-generated document to ensure accuracy.</li> </ul>"},{"location":"vibe-coding-guidelines/#step-3-choose-a-technology-stack","title":"Step 3: Choose a Technology Stack","text":"<p>Select technologies with large user bases and strong AI tool compatibility:</p> <ul> <li>Frontend: Next.js or React for web applications.</li> <li>Backend: Python with FastAPI for rapid API development.</li> <li>Database: Supabase (PostgreSQL) or MongoDB for flexibility.</li> </ul> <p>These choices are popular and well-supported by AI tools like Cursor, which excels with JavaScript and Python, as noted in Best AI Code Generators.</p>"},{"location":"vibe-coding-guidelines/#step-4-select-ai-tools-and-ides","title":"Step 4: Select AI Tools and IDEs","text":"<p>Choose AI-powered tools for efficient development:</p> <ul> <li>Integrated Development Environment (IDE): An AI-powered IDE like Cursor, such as those with natural language command support, enhances code generation.</li> <li>AI Models: Advanced LLMs from Anthropic or OpenAI for high-quality code generation.</li> <li>Supporting Tools: Snyk for security audits and GitHub Actions for CI/CD pipelines.</li> </ul> <p>Research tools to ensure they meet project needs, leveraging free trials where available.</p>"},{"location":"vibe-coding-guidelines/#step-5-configure-project-rules","title":"Step 5: Configure Project Rules","text":"<p>In your AI-powered IDE, set up rules to enforce standards, guided by resources like Cursor Directory Rules and Awesome Cursor Rules:</p> <ul> <li>Coding Standards: Ensure consistent style and error handling.</li> <li>Security Rules: Enable secrets detection and injection prevention.</li> <li>Version Control: Require commits after milestones with descriptive messages.</li> </ul> <p>Example .viberules File:</p> <pre><code>codegen:\n  max_file_size: 300\n  test_coverage: required\n  error_handling: required\n  dependencies:\n    whitelist: [\"react\", \"fastapi\", \"prisma\"]\nsecurity:\n  secrets_detection: enabled\n  injection_prevention: strict\nversion_control:\n  commit_after_milestones: true\n</code></pre> <p>Include third-party service documentation links in IDE settings for easy reference.</p>"},{"location":"vibe-coding-guidelines/#project-setup-checklist","title":"Project Setup Checklist","text":"<ul> <li>[ ] Define project scope and create FRD.</li> <li>[ ] Select technology stack (e.g., Next.js, FastAPI).</li> <li>[ ] Choose AI tools (e.g., Cursor, advanced LLMs).</li> <li>[ ] Configure project rules in IDE.</li> <li>[ ] Set up version control with Git.</li> </ul>"},{"location":"vibe-coding-guidelines/#3-planning-and-task-management","title":"3. Planning and Task Management","text":"<p>Effective planning ensures clear priorities and smooth development.</p>"},{"location":"vibe-coding-guidelines/#step-1-split-features-into-subtasks","title":"Step 1: Split Features into Subtasks","text":"<p>Use an AI model to break features into manageable subtasks. For example:</p> <ul> <li>Feature: User Authentication</li> <li>Subtasks:</li> <li>Implement login endpoint.</li> <li>Set up JWT token generation.</li> <li>Create password reset flow.</li> <li>Write unit tests.</li> </ul> <p>Prompt: \u201cBreak down the User Authentication feature into subtasks for a FastAPI backend.\u201d</p>"},{"location":"vibe-coding-guidelines/#step-2-ensure-comprehensive-frd","title":"Step 2: Ensure Comprehensive FRD","text":"<p>Verify the FRD includes:</p> <ul> <li>Feature Limits: E.g., \u201cLogin endpoint handles 100 requests/minute.\u201d</li> <li>Future Enhancements: E.g., \u201cAdd biometric authentication in V2.\u201d</li> <li>Technical Constraints: E.g., \u201cUse PostgreSQL with 10GB storage limit.\u201d</li> </ul> <p>This foresight supports scalability and minimizes rework.</p>"},{"location":"vibe-coding-guidelines/#step-3-prioritize-tasks-with-ai","title":"Step 3: Prioritize Tasks with AI","text":"<p>Share the FRD and subtasks with the AI via your AI-powered IDE\u2019s chat feature to prioritize tasks. For example:</p> <ul> <li>Prompt: \u201cPrioritize User Authentication subtasks to optimize development flow.\u201d</li> <li>The AI may suggest starting with the database schema, followed by the login endpoint.</li> </ul> <p>This ensures logical dependency handling.</p>"},{"location":"vibe-coding-guidelines/#4-development-workflow","title":"4. Development Workflow","text":"<p>Execute development with a structured workflow to maximize AI benefits.</p>"},{"location":"vibe-coding-guidelines/#step-1-reinforce-project-rules","title":"Step 1: Reinforce Project Rules","text":"<p>Ensure IDE rules maintain:</p> <ul> <li>Code Quality: Consistent formatting and error handling.</li> <li>Security: Protection against vulnerabilities.</li> <li>Commits: Regular commits with descriptive messages.</li> </ul>"},{"location":"vibe-coding-guidelines/#step-2-build-modules-with-ai-assistance","title":"Step 2: Build Modules with AI Assistance","text":"<p>For each feature:</p> <ul> <li>Write Tests First: Develop unit and integration tests before coding, following Test-Driven Development (TDD).</li> <li>Instruct AI Clearly: Use detailed prompts for code generation.</li> </ul> <p>Example Prompt:</p> <pre><code>As a backend developer, implement a user registration endpoint in FastAPI that:\n\n- Accepts username, email, and password.\n- Validates unique email.\n- Hashes password with bcrypt.\n- Stores user in PostgreSQL via SQLAlchemy.\n- Returns user ID on success.\n  Generate unit tests using pytest.\n</code></pre> <ul> <li>Review Code: Manually verify AI-generated code for correctness and efficiency.</li> </ul>"},{"location":"vibe-coding-guidelines/#step-3-handle-bugs-and-errors","title":"Step 3: Handle Bugs and Errors","text":"<p>For bugs:</p> <ul> <li>Provide Context: Share error logs with the AI.</li> <li>Include Screenshots: For UI issues, provide visuals.</li> <li>Prompt AI for Fixes: E.g., \u201cFix TypeError in router.py by handling null responses.\u201d</li> </ul> <p>Example Bug Report:</p> <pre><code>The login endpoint crashes with a 500 error for invalid credentials. Error log:\n[TypeError: 'NoneType' object is not subscriptable]\nModify to return a 401 status with 'Invalid credentials' message.\n</code></pre>"},{"location":"vibe-coding-guidelines/#daily-development-checklist","title":"Daily Development Checklist","text":"<ul> <li>[ ] Define daily subtasks.</li> <li>[ ] Write tests before coding.</li> <li>[ ] Generate and review AI code.</li> <li>[ ] Commit code with descriptive messages.</li> <li>[ ] Update documentation.</li> </ul>"},{"location":"vibe-coding-guidelines/#5-best-practices","title":"5. Best Practices","text":"<p>Optimize vibe coding with these practices.</p>"},{"location":"vibe-coding-guidelines/#prompt-engineering","title":"Prompt Engineering","text":"<p>Craft precise prompts to enhance AI output:</p> <ul> <li>Structure: Specify role, task, requirements, and constraints.</li> <li>Example Frontend Prompt:</li> </ul> <pre><code>As a frontend developer, create a React component for a user profile page that:\n\n- Displays name, email, and profile picture.\n- Fetches data from '/api/user'.\n- Handles loading and error states.\n- Uses Tailwind CSS.\n- Includes Jest tests.\n</code></pre> <ul> <li>Example Security Prompt:</li> </ul> <pre><code>Implement a password hashing function using bcrypt that:\n\n- Takes a plain text password.\n- Uses 12 salt rounds.\n- Handles errors.\n- Avoids plaintext storage.\n</code></pre>"},{"location":"vibe-coding-guidelines/#security-considerations","title":"Security Considerations","text":"<p>AI-generated code may introduce vulnerabilities, as noted by OpsMx. Mitigate risks:</p> <ul> <li>Manual Reviews: Inspect authentication and data handling logic.</li> <li>Automated Tools: Use Snyk and npm audit in CI pipelines.</li> <li>Secure Practices: Enforce parameterized queries and secure credential storage.</li> </ul> <p>Example Security Check:</p> <pre><code>npm audit --production\nsnyk test\n</code></pre> <ul> <li>Secrets Management: Use environment variables locally and cloud secrets managers in production.</li> <li>Resource Governance: Set API rate limits to control costs and prevent abuse.</li> </ul> <p>Example Rate Limit Configuration:</p> <pre><code>endpoints:\n  \"/api/auth/*\":\n    limit: 10/minute\n    burst: 20\n  \"/api/data/*\":\n    limit: 100/hour\n    burst: 150\n</code></pre>"},{"location":"vibe-coding-guidelines/#code-quality","title":"Code Quality","text":"<p>AI-generated code may lack optimization. Developers should review and refine for performance, readability, and maintainability, using AI output as a starting point.</p>"},{"location":"vibe-coding-guidelines/#6-transitioning-to-production","title":"6. Transitioning to Production","text":"<p>As the product scales, transition critical components to traditional development.</p>"},{"location":"vibe-coding-guidelines/#step-1-technical-assessment","title":"Step 1: Technical Assessment","text":"<ul> <li>Identify Critical Components: Focus on sensitive data or high-traffic areas.</li> <li>Performance Testing: Test at 5x expected load.</li> <li>Security Audits: Conduct penetration testing.</li> </ul>"},{"location":"vibe-coding-guidelines/#step-2-rewrite-key-components","title":"Step 2: Rewrite Key Components","text":"<ul> <li>Prioritize: Target high-risk or performance-critical parts.</li> <li>Traditional Development: Engage experienced developers for quality.</li> <li>Feature Parity: Ensure rewritten code matches original functionality.</li> </ul>"},{"location":"vibe-coding-guidelines/#step-3-upgrade-infrastructure","title":"Step 3: Upgrade Infrastructure","text":"<ul> <li>Scalability: Adopt containers (e.g., Docker, Kubernetes).</li> <li>Monitoring: Implement dashboards with Prometheus or Grafana.</li> <li>Incident Response: Document outage and breach procedures.</li> </ul>"},{"location":"vibe-coding-guidelines/#production-transition-checklist","title":"Production Transition Checklist","text":"<ul> <li>[ ] Test at 5x expected traffic.</li> <li>[ ] Rewrite critical components.</li> <li>[ ] Set up monitoring and alerts.</li> <li>[ ] Document incident response plan.</li> </ul>"},{"location":"vibe-coding-guidelines/#7-case-studies","title":"7. Case Studies","text":""},{"location":"vibe-coding-guidelines/#case-study-1-social-media-analytics-tool","title":"Case Study 1: Social Media Analytics Tool","text":"<p>Challenge: A startup needed an MVP for a social media analytics tool to attract investors.</p> <p>Solution: Using vibe coding with AI tools, they developed data aggregation and dashboard features in four weeks.</p> <p>Outcome: The MVP gained early users, providing valuable feedback for iteration.</p> <p>Transition: The team rewrote the data processing pipeline for scalability and enhanced security for user data.</p> <p>This case illustrates vibe coding\u2019s ability to accelerate development while supporting strategic refactoring for production.</p>"},{"location":"vibe-coding-guidelines/#8-conclusion","title":"8. Conclusion","text":"<p>Vibe coding empowers startups to rapidly build and test ideas using AI, but it demands clear boundaries, rigorous code reviews, and a scaling strategy. By following this guideline, startups can leverage AI\u2019s potential while ensuring quality and security as they grow.</p>"}]}